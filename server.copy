/**********************************************************
 * Socket Server for IOT
 *
 *
 *********************************************************/

require("../config/config");
require("../startup/db")();
const { Meter, validate } = require("../models/meters");
const { ackMsg, noAckMsg } = require("../config/messages");

const fs = require("fs");

/******************* Secure Socket ************************/
// const privateKey = fs.readFileSync('ssl-cert/file.pen', 'utf-8');
// const certificate = fs.readFileSync('ssl-cert/fullchain.pen', 'utf-8');
// const credentials = { key: privateKey, cert: certificate };

//const https = require("https"); //Create a HTTPS server
const http = require("http");

// const httpsServer = https.createServer(credentials);
// httpsServer.listen(process.env.PORT);

const httpServer = http.createServer();

httpServer.listen(process.env.PORT, "0.0.0.0");
const webSocketServer = require("ws").Server;

//const wss = new webSocketServer({ server: httpsServer });

const wss = new webSocketServer({
  server: httpServer,
  clientTracking: true
});

/*
const wss = new webSocketServer({
        port:,
        host:,
        backlog:,
        server: httpServer,
        verifyClient : function,
        handleProtocols : function,
        path :,
        noServer :,                  //Enable no server mode
        clientTracking : Boolean,    //Define Track or Not Client
        perMessageDeflate : Boolean, //Use deflate or not
        maxPayload :                 //max message size in bytes
    },
    () => {} //Callback
);
*/

wss.on("listening", () => {
  console.log(`WebSocket IOT is listening on port ${process.env.PORT}`);
});

wss.on("connection", (ws, req) => {
  const clientInfo = {
    ip: req.connection.remoteAddress,
    headers: req.headers,
    Clients: wss.clients,
    Socket: ws
  };

  ws.on("message", async function incoming(message) {
    console.log("Message Received : ", {
      client: clientInfo.ip,
      message: JSON.stringify(message)
    });

    //Save to DB
    let meter = new Meter(JSON.parse(message));
    console.log(meter);
    await meter.save((err, data) => {
      if (err) {
        ws.send(JSON.stringify(noAckMsg));
      } else {
        ws.send(JSON.stringify(ackMsg));
      }
    });

    /*
      .save()
      .then(
        ws.send(JSON.stringify(ackMsg), err => {
          if (err) console.log("Error to send");
        })
      )
      .catch(
        ws.send(JSON.stringify(noAckMsg), err => {
          if (err) console.log("Error to send");
        })
      );
      */
    /*
          let response = {
            noAckMsg,
            error: error
          };
      
            ws.send(JSON.stringify(noAckMsg), err => {
             if (err) console.log("Error to send");
             }
            );    */

    /*
    } catch (error) {
      
      let response = {
        noAckMsg,
        error: error
      };
      ws.send(JSON.stringify(response), err => {
        if (err) console.log("Error to send");
      });
    }
    */
  });

  /*
  ws.send(`Are connected to server`, err => {
    if (err) console.log("Error to send");
  });
  */
  //Detect Connection Broken
  //ws.isAlive = true;
  //ws.on('pong', heartbeat);
});

/**********************************************************
 * Sent Binary Data
     const array = new Float32Array(5);
 
    for (var i = 0; i < array.length; ++i) {
        array[i] = i / 2;
    }
    ws.send(array);
***********************************************************/

/***********************************************************
 *************** Detect Connection Broken ******************
 **********************************************************/
function noop() {}

function heartbeat() {
  this.isAlive = true;
}

/*
const interval = setInterval(function ping() {
    if (process.env.CHKCONN === true) console.log('checking connection');
    wss.clients.forEach(function each(ws) {
        if (ws.isAlive === false) return ws.terminate();
        ws.isAlive = false;
        ws.ping(noop);
    });
}, 3000);
*/
